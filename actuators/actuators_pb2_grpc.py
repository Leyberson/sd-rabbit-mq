# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import actuators_pb2 as actuators__pb2


class ActuatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.turn_on = channel.unary_unary(
                '/Actuator/turn_on',
                request_serializer=actuators__pb2.Action.SerializeToString,
                response_deserializer=actuators__pb2.Turned.FromString,
                )
        self.turn_off = channel.unary_unary(
                '/Actuator/turn_off',
                request_serializer=actuators__pb2.Action.SerializeToString,
                response_deserializer=actuators__pb2.Turned.FromString,
                )
        self.change_temp = channel.unary_unary(
                '/Actuator/change_temp',
                request_serializer=actuators__pb2.TempChange.SerializeToString,
                response_deserializer=actuators__pb2.AfterChange.FromString,
                )


class ActuatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def turn_on(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def turn_off(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def change_temp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ActuatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'turn_on': grpc.unary_unary_rpc_method_handler(
                    servicer.turn_on,
                    request_deserializer=actuators__pb2.Action.FromString,
                    response_serializer=actuators__pb2.Turned.SerializeToString,
            ),
            'turn_off': grpc.unary_unary_rpc_method_handler(
                    servicer.turn_off,
                    request_deserializer=actuators__pb2.Action.FromString,
                    response_serializer=actuators__pb2.Turned.SerializeToString,
            ),
            'change_temp': grpc.unary_unary_rpc_method_handler(
                    servicer.change_temp,
                    request_deserializer=actuators__pb2.TempChange.FromString,
                    response_serializer=actuators__pb2.AfterChange.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Actuator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Actuator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def turn_on(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Actuator/turn_on',
            actuators__pb2.Action.SerializeToString,
            actuators__pb2.Turned.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def turn_off(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Actuator/turn_off',
            actuators__pb2.Action.SerializeToString,
            actuators__pb2.Turned.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def change_temp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Actuator/change_temp',
            actuators__pb2.TempChange.SerializeToString,
            actuators__pb2.AfterChange.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
